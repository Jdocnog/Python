
##################################################################################Check user input Basic

def user_choice():

    #Variables

    #Initial
    choice = 'WRONG'
    acceptable_values = range(0,10)
    within_range = False

    #Two Conditions to check
    #Digit or within_range == False
    while choice.isdigit() == False or within_range == False:
        choice = input("Please enter a number (0-10): ")

        #digit Check
        if choice.isdigit() == False:
            print("That is not a digit")

        #range check
        if choice.isdigit():
            if int(choice) in acceptable_values:
                within_range = True
            else:
                print("The acceptable range is 0 - 10.")
                within_range = False

    return int(choice)

print(user_choice())

#######################################################################END Check user input Basic

##################################################################################################Number Guessing Game
#this is a guess the number game.
import random

print("Hello, what is your name?")
name = input()

print(name + ", I'm thinking of a number between 1 and 20")
secretNumber = random.randint(1, 20)

for guessesTaken in range(1, 7):
    print("Take a guess")
    guess = int(input())

    if guess < secretNumber:
        print("Your guess is too low")
    elif guess > secretNumber:
        print("Your guess is too high")
    else:
        break #this condition is for the correct guess

if guess == secretNumber:
    print("Good Job, you guessed the number in " + str(guessesTaken) + " tries.")
else:
    print("Nope, the number I was thinking of was " + str(secretNumber))

############################################################################################End number guessing game

#############################################################################################################################Password Generator
import string
import random

#Initialize lists for the random generator to pick from
alphabets = list(string.ascii_letters)
digits = list(string.digits)
special_characters = list("!@#$%^&*()")
characters = list(string.ascii_letters + string.digits + "!@#$%^&*()")

def generatePassword():
    pwdLength = int(input("Please enter the length you would like your password to be: "))

    ## number of character types
    alphabets_count = int(input("Enter alphabets count in password: "))
    digits_count = int(input("Enter digits count in password: "))
    special_characters_count = int(input("Enter special characters count in password: "))

    characters_count = alphabets_count + digits_count + special_characters_count

    if characters_count > pwdLength:
        print("Characters total count is great that the password length")
        return

    password = []

    for i in range(alphabets_count):
        password.append(random.choice(alphabets))
    for i in range(digits_count):
        password.append(random.choice(digits))
    for i in range(special_characters_count):
        password.append(random.choice(special_characters))

    if characters_count < pwdLength:
        random.shuffle(characters)
        for i in range(pwdLength - characters_count):
            password.append(random.choice(characters))
        print("Your password was shorter than we were expecting based on your length, so we added some characters.")

    random.shuffle(password)

    print("".join(password))

generatePassword()
###################################################################################################################################End password generator




################################################################################################################Band Name Generator

print("Welcome to the Band Name Generator.")

cityName = input("What city did you grow up in?\n") #Gets user input and sets it to cityName variable
petName = input("What's your pet's name?\n") #Gets user input and sets it to the petName variable

print("Your band name could be " + cityName + " " + petName)
###############################################################################################################End band name generator




#######################################################################################################Tip Calculator
print("Welcome to my tip calculator")

bill = float(input("What was the total bill? $"))

split = float(input("How many people are splitting the Bill? "))

tipPercent = float(input("What percentage do you want to tip? "))
tipPercent = tipPercent / 100

billWithTip = bill + (bill * tipPercent)

if split > 1:
    eachPerson = billWithTip / split
    print("Each person should pay $" + str(eachPerson))
else:
    print("Bill with tip is $" + str(billWithTip))
######################################################################################################End tip calculator


######################################################################################################Check for Leap Year
year = int(input("Which year do you want to check?\n"))



if year % 4 == 0:
    if year % 100 == 0:
        if year % 400 == 0:
            print(str(year) + " is a leap year.")
        else:
            print("That year is not a leap year.")
    else:
        print("That year is a leap year.")
else:
    print("That year is not a leap year.")
#######################################################################################################End Check for Leap year


####################################################################################################Multiple If Statements, pizza selector
print("Welcome to the Pizza Place, Pizza?")
size = input("What size pizza do you want? S, M, or L?: ")
add_pepperoni = input("Do you want pepperoni's? Y or N: ")
extra_cheese = input("Do you want extra cheese? Y or N: ")

bill = 0

if size == 'S':
    bill = 15
    if add_pepperoni == 'Y':
        bill += 2
        if extra_cheese == 'Y':
            bill += 1
            print(f"your final bill is ${bill}")
        else:
            print(f"your final bill is ${bill}")
    else:
        print(f"your final bill is ${bill}")

if size == 'M':
    bill = 20
    if add_pepperoni == 'Y':
        bill += 3
        if extra_cheese == 'Y':
            bill += 1
            print(f"your final bill is ${bill}")
        else:
            print(f"your final bill is ${bill}")
    else:
        print(f"your final bill is ${bill}")

if size == 'L':
    bill = 25
    if add_pepperoni == 'Y':
        bill += 3
        if extra_cheese == 'Y':
            bill += 1
            print(f"your final bill is ${bill}")
        else:
            print(f"your final bill is ${bill}")

##############################################################################################End multiple If Statements

##############################################################################################logical operators plus love calculator
print("Welcome to the love calculator?")
name1 = input("What is your name? \n")
name2 = input("What is their name? \n")

name1 = name1.lower()
name2 = name2.lower()
true_count = 0
love_count = 0

true_count += name1.count("t")
true_count += name1.count("r")
true_count += name1.count("u")
true_count += name1.count("e")

true_count += name2.count("t")
true_count += name2.count("r")
true_count += name2.count("u")
true_count += name2.count("e")

love_count += name1.count("l")
love_count += name1.count("o")
love_count += name1.count("v")
love_count += name1.count("e")

love_count += name2.count("l")
love_count += name2.count("o")
love_count += name2.count("v")
love_count += name2.count("e")

true_count = str(true_count)
love_count = str(love_count)

truelove_count = true_count + love_count

truelove_count = int(truelove_count)

if truelove_count < 10 | truelove_count > 90:
    print(f"Your score is {truelove_count}, you go together like coke and mentos.")
elif truelove_count > 40 & truelove_count <= 50:
    print(f"Your score is {truelove_count}, you are alright together.")
else:
    print(f"Your score is {truelove_count}")


############################################################################################End Logical operators.





###########################################################################################Choose your own adventure story
crossroad = input("You're at a crossroad. Where do you want to go? Type 'left' or 'right'? ").lower()

island = ''
door = ''

if crossroad == "left":
    island = input("'Wait' for a boat, or 'swim' across this river? ").lower()
if crossroad == "right":
    print("Game Over.")


if island == "wait":
    door = input("Which door would you go into? 'Red', 'Blue', 'Yellow' ").lower()
if island == "swim":
    print("Game Over.")

if door == "red":
    print("Game Over.")
elif door == "blue":
    print("Game Over.")
elif door == "yellow":
    print("You Win.")
#########################################################################################End choose your own adventure story.

###########################################################################################Working with Nested Lists
#############Choose where the treasure goes game.

row1 = ["⬜️","⬜️","⬜️"]
row2 = ["⬜️","⬜️","⬜️"]
row3 = ["⬜️","⬜️","⬜️"]
map = [row1, row2, row3]
print(f"{row1}\n{row2}\n{row3}")
position = input("Where do you want to put the treasure? ")

column = int(position[0]) - 1
row = int(position[1]) - 1

map[column][row] = 'X️'

print(f"{row1}\n{row2}\n{row3}")
#########################################################################################End working with nested lists

#########################################################################################Rock paper scissors
import random

rock = '''
    _______
---'   ____)
      (_____)
      (_____)
      (____)
---.__(___)
'''

paper = '''
    _______
---'   ____)____
          ______)
          _______)
         _______)
---.__________)
'''

scissors = '''
    _______
---'   ____)____
          ______)
       __________)
      (____)
---.__(___)
'''

game_images = [rock, paper, scissors]

user_choice = int(input("What do you choose? Type 0 for Rock, 1 for Paper or 2 for Scissors.\n"))
print(game_images[user_choice])

computer_choice = random.randint(0, 2)
print("Computer chose:")
print(game_images[computer_choice])

if user_choice >= 3 or user_choice < 0:
  print("You typed an invalid number, you lose!")
elif user_choice == 0 and computer_choice == 2:
  print("You win!")
elif computer_choice == 0 and user_choice == 2:
  print("You lose")
elif computer_choice > user_choice:
  print("You lose")
elif user_choice > computer_choice:
  print("You win!")
elif computer_choice == user_choice:
  print("It's a draw")
#######################################################################################################End Rock paper scissors

#######################################################################################################Average using for loops
student_heights = input("Input a list of student heights ").split()
for n in range(0, len(student_heights)):
  student_heights[n] = int(student_heights[n])

height_avg = 0
counter_for_length = 0

for student in student_heights:
    height_avg += student
    counter_for_length += 1
average = int(height_avg / counter_for_length)

print(average)
#######################################################################################################End Average using for loops

#######################################################################################################Mean of Scores

student_scores = input("Input a list of student scores ").split()
for n in range(0, len(student_scores)):
  student_scores[n] = int(student_scores[n])
print(student_scores)

highest_Score = student_scores[0]

for score in student_scores:
    if highest_Score < score:
        highest_Score = score

print(highest_Score)
####################################################################################################End mean of scores

######################################################################################################Random password generator
#Password Generator Project
import random
letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
symbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+']

print("Welcome to the PyPassword Generator!")
nr_letters = int(input("How many letters would you like in your password?\n"))
nr_symbols = int(input(f"How many symbols would you like?\n"))
nr_numbers = int(input(f"How many numbers would you like?\n"))

password = ''
password_list = []
#Eazy Level - Order not randomised:
#e.g. 4 letter, 2 symbol, 2 number = JduE&!91
# for letter in range(nr_letters):
#     random_number = random.randint(0, 51)
#     password += letters[random_number]
#
# for letter in range(nr_symbols):
#     random_number = random.randint(0, 9)
#     password += numbers[random_number]
#
# for letter in range(nr_numbers):
#     random_number = random.randint(0, 8)
#     password += symbols[random_number]
#
# for character in range(len(password)):
    #password_list = list(password)
#Hard Level - Order of characters randomised:
#e.g. 4 letter, 2 symbol, 2 number = g^2jk8&P

password_list = []

for char in range(1, nr_letters + 1):
  password_list.append(random.choice(letters))

for char in range(1, nr_symbols + 1):
  password_list += random.choice(symbols)

for char in range(1, nr_numbers + 1):
  password_list += random.choice(numbers)

print(password_list)
random.shuffle(password_list)
print(password_list)

password = ""
for char in password_list:
  password += char

print(f"Your password is: {password}")
##############################################################################################End Random Password Generator


############################################################################################Iterations of creating hangman game.  SO it doesn't look like I just copy pasted.

#Step 1
import random
word_list = ["ardvark", "baboon", "camel"]

#TODO-1 - Randomly choose a word from the word_list and assign it to a variable called chosen_word.
chosen_word = random.choice(word_list)
print(chosen_word)

#TODO-2 - Ask the user to guess a letter and assign their answer to a variable called guess. Make guess lowercase.
guess = input("Guess a letter: ").lower()
print(guess)

#TODO-3 - Check if the letter the user guessed (guess) is one of the letters in the chosen_word.
for letter in chosen_word:
    if letter == guess:
        print("Right")
    else:
        print("Wrong")
#Step 2

import random
word_list = ["aardvark", "baboon", "camel"]
chosen_word = random.choice(word_list)

#Testing code
print(f'Pssst, the solution is {chosen_word}.')

#TODO-1: - Create an empty List called display.
#For each letter in the chosen_word, add a "_" to 'display'.
#So if the chosen_word was "apple", display should be ["_", "_", "_", "_", "_"] with 5 "_" representing each letter to guess.

display = []
for letter in chosen_word:
    display.append("_")

print(display)

guess = input("Guess a letter: ").lower()

#TODO-2: - Loop through each position in the chosen_word;
#If the letter at that position matches 'guess' then reveal that letter in the display at that position.
#e.g. If the user guessed "p" and the chosen word was "apple", then display should be ["_", "p", "p", "_", "_"].
count = 0
for letter in chosen_word:
    if letter == guess:
        display[count] = letter

    count += 1

#TODO-3: - Print 'display' and you should see the guessed letter in the correct position and every other letter replace with "_".
#Hint - Don't worry about getting the user to guess the next letter. We'll tackle that in step 3.
print(display)
#Step 3

import random
word_list = ["aardvark", "baboon", "camel"]
chosen_word = random.choice(word_list)
word_length = len(chosen_word)

#Testing code
print(f'Pssst, the solution is {chosen_word}.')

#Create blanks
display = []
for _ in range(word_length):
    display += "_"

#TODO-1: - Use a while loop to let the user guess again. The loop should only stop once the user has guessed all the letters in the chosen_word and 'display' has no more blanks ("_"). Then you can tell the user they've won.
while "_" in display:


    guess = input("Guess a letter: ").lower()

    #Check guessed letter
    for position in range(word_length):
        letter = chosen_word[position]
        print(f"Current position: {position}\n Current letter: {letter}\n Guessed letter: {guess}")
        if letter == guess:
            display[position] = letter

    print(display)
#Step 4

import random

stages = ['''
  +---+
  |   |
  O   |
 /|\  |
 / \  |
      |
=========
''', '''
  +---+
  |   |
  O   |
 /|\  |
 /    |
      |
=========
''', '''
  +---+
  |   |
  O   |
 /|\  |
      |
      |
=========
''', '''
  +---+
  |   |
  O   |
 /|   |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
  |   |
      |
      |
=========
''', '''
  +---+
  |   |
  O   |
      |
      |
      |
=========
''', '''
  +---+
  |   |
      |
      |
      |
      |
=========
''']

end_of_game = False
word_list = ["ardvark", "baboon", "camel"]
chosen_word = random.choice(word_list)
word_length = len(chosen_word)

#TODO-1: - Create a variable called 'lives' to keep track of the number of lives left.
#Set 'lives' to equal 6.
lives = 6
#Testing code
print(f'Pssst, the solution is {chosen_word}.')

#Create blanks
display = []
for _ in range(word_length):
    display += "_"

while not end_of_game:
    guess = input("Guess a letter: ").lower()


    #Check guessed letter
    for position in range(word_length):
        letter = chosen_word[position]
        # print(f"Current position: {position}\n Current letter: {letter}\n Guessed letter: {guess}")
        if letter == guess:
            display[position] = letter

    #TODO-2: - If guess is not a letter in the chosen_word,
    #Then reduce 'lives' by 1.
    #If lives goes down to 0 then the game should stop and it should print "You lose."
    if guess not in chosen_word:
        lives -= 1
        if lives == 0:
            end_of_game = True
            print("You Lose")

    #Join all the elements in the list and turn it into a String.
    print(f"{' '.join(display)}")

    #Check if user has got all letters.
    if "_" not in display:
        end_of_game = True
        print("You win.")

    #TODO-3: - print the ASCII art from 'stages' that corresponds to the current number of 'lives' the user has remaining.
    print(stages[lives])
#Step 5

import random

#TODO-1: - Update the word list to use the 'word_list' from hangman_words.py
import hangman_words

chosen_word = random.choice(hangman_words.word_list)
word_length = len(chosen_word)

end_of_game = False
lives = 6

#TODO-3: - Import the logo from hangman_art.py and print it at the start of the game.
import hangman_art
print(hangman_art.logo)


#Testing code
print(f'Pssst, the solution is {chosen_word}.')

#Create blanks
display = []
for _ in range(word_length):
    display += "_"

while not end_of_game:
    guess = input("Guess a letter: ").lower()

    #TODO-4: - If the user has entered a letter they've already guessed, print the letter and let them know.
    if guess in display:
        print("you've already guessed this letter.")

    #Check guessed letter
    for position in range(word_length):
        letter = chosen_word[position]
        #print(f"Current position: {position}\n Current letter: {letter}\n Guessed letter: {guess}")
        if letter == guess:
            display[position] = letter

    #Check if user is wrong.
    if guess not in chosen_word:
        #TODO-5: - If the letter is not in the chosen_word, print out the letter and let them know it's not in the word.
        print(f"{guess} is not in this word")
        lives -= 1
        if lives == 0:
            end_of_game = True
            print("You lose.")

    #Join all the elements in the list and turn it into a String.
    print(f"{' '.join(display)}")

    #Check if user has got all letters.
    if "_" not in display:
        end_of_game = True
        print("You win.")

    #TODO-2: - Import the stages from hangman_art.py and make this error go away.
    print(hangman_art.stages[lives])

###############################################################################################################################END HANGMAN GAME

###############################################################################################################################Ceasar Encryption
alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
text = input("Type your message:\n").lower()
shift = int(input("Type the shift number:\n"))

#TODO-1: Combine the encrypt() and decrypt() functions into a single function called caesar().
def caesar(direction, text, shift):
    coded_text = ""
    # This also works instead of two if statements
    # if direction == "decode"
    #   shift *= -1
    for letter in text:
        position = alphabet.index(letter)
        #new_position = position + shift
        if direction == "encode":
            new_position = position + shift
        elif direction == "decode":
            new_position = position - shift
        coded_text += alphabet[new_position]
    print(f"the {direction}d text is {coded_text}")


# def encrypt(plain_text, shift_amount):
#   cipher_text = ""
#   for letter in plain_text:
#     position = alphabet.index(letter)
#     new_position = position + shift_amount
#     cipher_text += alphabet[new_position]
#   print(f"The encoded text is {cipher_text}")
#
# def decrypt(cipher_text, shift_amount):
#   plain_text = ""
#   for letter in cipher_text:
#     position = alphabet.index(letter)
#     new_position = position - shift_amount
#     plain_text += alphabet[new_position]
#   print(f"The decoded text is {plain_text}")
#
# if direction == "encode":
#   encrypt(plain_text=text, shift_amount=shift)
# elif direction == "decode":
#   decrypt(cipher_text=text, shift_amount=shift)

#TODO-2: Call the caesar() function, passing over the 'text'
caesar(direction=direction, text=text, shift=shift)
alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
            'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',
            'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']


def caesar(start_text, shift_amount, cipher_direction):
    end_text = ""
    if cipher_direction == "decode":
        shift_amount *= -1
    for char in start_text:
        if char in alphabet:
            position = alphabet.index(char)
            new_position = position + shift_amount
            end_text += alphabet[new_position]
        else:
            end_text += char
        # TODO-3: What happens if the user enters a number/symbol/space?
        # Can you fix the code to keep the number/symbol/space when the text is encoded/decoded?
        # e.g. start_text = "meet me at 3"
        # end_text = "•••• •• •• 3"

    print(f"Here's the {cipher_direction}d result: {end_text}")


# TODO-1: Import and print the logo from art.py when the program starts.
from art import logo
print(logo)

# TODO-4: Can you figure out a way to ask the user if they want to restart the cipher program?
# e.g. Type 'yes' if you want to go again. Otherwise type 'no'.
# If they type 'yes' then ask them for the direction/text/shift again and call the caesar() function again?
# Hint: Try creating a while loop that continues to execute the program if the user types 'yes'.
continue_caesar = True

while(continue_caesar):
    direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
    text = input("Type your message:\n").lower()
    shift = int(input("Type the shift number:\n"))


# TODO-2: What if the user enters a shift that is greater than the number of letters in the alphabet?
# Try running the program and entering a shift number of 45.
# Add some code so that the program continues to work even if the user enters a shift number greater than 26.
# Hint: Think about how you can use the modulus (%).
    shift = shift % 26

    caesar(start_text=text, shift_amount=shift, cipher_direction=direction)

    continue_yes_no = input("Type 'yes' if you want to go again. Otherwise type 'no': \n").lower()
    if continue_yes_no == "no":
        continue_caesar = False
        print("GoodBye")
##########################################################################################################################End Caesar cipher

##########################################################################################################################Check dictionary to change information inside.
student_scores = {
    "Harry": 81,
    "Ron": 78,
    "Hermione": 99,
    "Draco": 74,
    "Neville": 62,
}
# 🚨 Don't change the code above 👆

# TODO-1: Create an empty dictionary called student_grades.
student_grades = {}

# TODO-2: Write your code below to add the grades to student_grades.👇
for key in student_scores:
#Can also set score = student_scores[key] and each if would just have score >=####
    if student_scores[key] >= 91:
        student_grades[key] = "Outstanding"
    elif student_scores[key] >= 81:
        student_grades[key] = "Exceeds Expectations"
    elif student_scores[key] >= 71:
        student_grades[key] = "Acceptable"
    else:
        student_grades[key] = "Fail"

# 🚨 Don't change the code below 👇
print(student_grades)

######################################################################################################End Check Dictionary

########################################################################################################Add dictionary to list of dictionaries
travel_log = [
{
  "country": "France",
  "visits": 12,
  "cities": ["Paris", "Lille", "Dijon"]
},
{
  "country": "Germany",
  "visits": 5,
  "cities": ["Berlin", "Hamburg", "Stuttgart"]
},
]
#🚨 Do NOT change the code above

#TODO: Write the function that will allow new countries
#to be added to the travel_log. 👇

def add_new_country(country, times_visited, cities_visited):
    new_dictionary = {
        "country" : country,
        "visits" : times_visited,
        "cities" : cities_visited
    }
    travel_log.append(new_dictionary)
    #This also works
    # new_dictionary["country"] = country
    # new_dictionary["visits"] = times_visited
    # new_dictionary["cities"] = cities_visited


add_new_country("Russia", 2, ["Moscow", "Saint Petersburg"])
print(travel_log)
#############################################################################################################################End Add dictionary to list of dictionaries

########################################################################################################highest bidder, silent auction
from replit import clear
#HINT: You can call clear() to clear the output in the console.

bids = {}
bidding_finished = False


def find_highest_bidder(bidding_record):
    highest_bid = 0
    winner = ""
    for bidder in bidding_record:
        bid_amount = bidding_record[bidder]
        if bid_amount > highest_bid:
            highest_bid = bid_amount
            winner = bidder
    print(f"The Winner is {winner} with a bid of ${highest_bid}")

while not bidding_finished:
    name = input("What is your name? ")
    price = int(input("What is your bid? $"))
    bids[name] = price
    should_continue = input("Are there any other bidder? Type 'yes' or 'no'.\n")
    if should_continue == "no":
        bidding_finished = True
        find_highest_bidder(bids)
    elif should_continue == "yes":
        clear()

#####MY TRY, SURPRISE IT DIDNT WORK
# continue_bidding = True
#
# bidding = [{}]
#
# while(continue_bidding):
#     new_bidding = {}
#
#     name = input("What is your name?: ")
#     bid = int(input("What is your Bid?: "))
#
#     new_bidding["Name"] = name
#     new_bidding["Bid"] = bid
#     bidding.append(new_bidding
#                    )
#     more_users = input("Are there any others who want to bid?: ").lower()
#
#     if more_users == "no":
#         continue_bidding = False
#     else:
#         clear()
#
# highest_bid = bidding[bid]
# for bidder in bidding:
#     if bidder[bid] > highest_bid:
#         highest_bid = bidder[bid]
# print(f"The highest bid is {bidder['Name']} with the Bid of ${bidder['Bid']}")

######################################################################################################################End highest bidder, silent auction

#####################################################################################################################Basic calculator using Dictionaries
part 1 where i'm stupid as fuck
from art import logo
print(logo)

def add(n1, n2):
    return n1 + n2

def subtract(n1, n2):
    return n1 - n2

def multiply(n1, n2):
    return n1 * n2

def divide(n1, n2):
    return n1 / n2

operations = {
    "+": add,
    "-": subtract,
    "*": multiply,
    "/": divide,
}
num1 = int(input("What's the first number?: "))
num2 = int(input("What's the second number?: "))
for symbol in operations:
    print(symbol)
user_input = input("What operation do you want to complete?: ")

calc_symbol = operations[user_input]
answer = calc_symbol(num1, num2)

#Not fucking it you stupid piece of shit
# if user_input == "+":
#     answer = add(num1, num2)
# elif user_input == "-":
#     answer = subtract(num1, num2)
# elif user_input == "*":
#     answer = multiply(num1, num2)
# elif user_input == "/":
#     answer = divide(num1, num2)

print(f"{num1} {user_input} {num2} = {answer}")

#####################Part 2 where the smart people would be
from art import logo


def add(n1, n2):
    return n1 + n2

def subtract(n1, n2):
    return n1 - n2

def multiply(n1, n2):
    return n1 * n2

def divide(n1, n2):
    return n1 / n2

operations = {
    "+": add,
    "-": subtract,
    "*": multiply,
    "/": divide,
}

def calculator():
    print(logo)
    num1 = float(input("What's the first number?: "))
    for symbol in operations:
        print(symbol)
    should_continue = True

    while should_continue:
        user_input = input("What operation do you want to complete?: ")
        num2 = float(input("What's the next number?: "))
        calc_symbol = operations[user_input]
        answer = calc_symbol(num1, num2)

        print(f"{num1} {user_input} {num2} = {answer}")

        if input(f"Type 'y' to continue with {answer}, or 'n' to start anew calculating: ") == "y":
            num1 = answer
        else:
            should_continue = False
            calculator()
calculator()

########################################################################################################End calculator where I didn't have slightest fucking clue until someone did it for me becuase I'm fucking stupid


#############################################################################################################Blackjack game, just one more while loop and move all the comparators into a new function
import random

cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
game_continues = True


def deal_card():
    random_card = random.randint(0, len(cards) - 1)
    random_card = cards[random_card]
    return random_card

#Hint 5: Deal the user and computer 2 cards each using deal_card() and append().
user_cards = []
computer_cards = []
for x in range(0, 2):
    user_cards.append(deal_card())
    computer_cards.append(deal_card())

#TODO Used to make sure computer and Player get cards, remove this later
print(user_cards)
print(computer_cards)

#Hint 6: Create a function called calculate_score() that takes a List of cards as input
#and returns the score.
#Look up the sum() function to help you do this.

def calculate_score(cards):
    score = sum(cards)
    if score == 21:
        return 0
    if score > 21:
        if 11 in cards:
            cards.remove(11)
            cards.append(1)

    return score

# def compare(user_score, computer_score):
#     if user_score == computer_score:


while game_continues:
    print(user_cards)
    print(f"Your score as the player is {calculate_score(user_cards)}")
    print(f"The computer's score is {calculate_score(computer_cards)}")
    user_score = calculate_score(user_cards)
    computer_score = calculate_score(computer_cards)

    if user_score == 0:
        print("Player Wins!")
        game_continues = False
        break
    if computer_score == 0:
        print("Dealer Wins!")
        game_continues = False
        break
    if user_score > 21:
        print("You busted!")
        game_continues = False
        break
    if computer_score > 21:
        print("you Win!")
        game_continues = False
        break
    if computer_score == user_score:
        print("It's a draw.")
        game_continues = False
        break
    another_card = input("Do you want to draw another card?: 'y' or 'n': \n").lower()
    if another_card == 'y':
        user_cards.append(deal_card())
    else:
        if computer_score < 17:
            computer_cards.append(deal_card())
########################################################################################################End mostly completed black jack game


########################################################################################################Random Number Guess, I actually made this
#Number Guessing Game Objectives:

import random

# Include an ASCII art logo.
# Allow the player to submit a guess for a number between 1 and 100.
# Check user's guess against actual answer. Print "Too high." or "Too low." depending on the user's answer.
# If they got the answer correct, show the actual answer to the player.
# Track the number of turns remaining.
# If they run out of turns, provide feedback to the player.
# Include two different difficulty levels (e.g., 10 guesses in easy mode, only 5 guesses in hard mode).

def computerGuess():
    computerChoice = random.randint(0, 100)
    return computerChoice

def playerChoice():
    pChoice = input("Make a Guess: ")
    return pChoice

def compareChoices(computer, player):
    if computerNumber == playerNumber:
        print("You guessed the correct number!\nYou Win!")
        return True
    elif computerNumber < playerNumber:
        print("Too High\nGuess Again")
        return False
    elif computerNumber > playerNumber:
        print("Too Low\nGuess Again")
        return False


guessedCorrect = False

difficulty = input("Choose a difficulty. Type 'easy' or 'hard': ").lower()
numGuesses = 0
if difficulty == 'easy':
    numGuesses = 10
if difficulty == 'hard':
    numGuesses = 5

computerNumber = computerGuess()

while not guessedCorrect:
    if numGuesses == 0:
        print("You've run out of guesses, you lost.")
        break
    print(f"You have {numGuesses} attempts remaining to guess the number.")
    playerNumber = int(playerChoice())
    guessedCorrect = compareChoices(computerNumber, playerNumber)
    if guessedCorrect == False:
        numGuesses -= 1

#############################################################################################End Random Number Guesser

